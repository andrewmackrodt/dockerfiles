#!/bin/bash

FROM=andrewmackrodt/$(basename "$(pwd)")

parseBuildVersions() {
    if yq --help | grep -q kislyuk; then
        yq -r '.build.versions[]' "$1"
    else
        yq e '.build.versions[]' "$1"
    fi
}

getLatestVersion() {
    echo "getting latest nodejs release for $1 ..." >&2

    docker run -i --rm --user root --entrypoint=/bin/sh -e "NODEJS_MAJOR_VERSION=$1" "$FROM" <<'EOF'
        echo "deb [signed-by=/usr/share/keyrings/nodesource-repo.gpg] https://deb.nodesource.com/node_${NODEJS_MAJOR_VERSION}.x nodistro main" >/etc/apt/sources.list.d/nodesource.list
        apt-get update -qq
        apt-cache show nodejs | grep "Version: ${NODEJS_MAJOR_VERSION}\." | head -n1 | awk '{ print $2 }'
EOF
}

versions=$(parseBuildVersions 'build.yml' | sed -E 's/^ *- |"//g')

if [ -z "$versions" ]; then
    echo 'failed to parse build.yml' >&2

    exit 255
fi

for v in $versions; do
    nodejs_major_version=$v
    nodejs_version=$(getLatestVersion "$nodejs_major_version")
    version=$( \
        echo "$nodejs_version" \
            | sed -E 's/^([0-9]+:)?([0-9]+(\.[0-9]+)*)(-([0-9]+))?.*/\2-r\5/' \
            | sed -E 's/-r$//' \
      )

    if [ -z "$version" ]; then
        echo "failed to determine version from $nodejs_version" >&2

        exit 255
    fi

    {
      echo "NODEJS_MAJOR_VERSION=$nodejs_major_version"
      echo "NODEJS_VERSION=$nodejs_version"
      echo "LABEL_VERSION=$version"
    } \
      > "build${v}.properties"
done
