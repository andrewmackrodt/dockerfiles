#!/bin/bash

FROM=$(sed -n -E "s/^FROM ([^# ]+).*/\1/p" Dockerfile)

parseBuildVersions() {
    if yq --help | grep -q kislyuk; then
        yq -r '.build.versions[]' "$1"
    else
        yq r "$1" 'build.versions[*]'
    fi
}

getLatestVersion() {
    echo "getting latest nodejs release for $1 ..." >&2

    docker run -i --rm \
        --user root \
        --entrypoint=/bin/sh \
        -e "release=$1" \
        "$FROM" <<'EOF'
            wget -qO- "https://deb.nodesource.com/setup_${release}" | bash - >&2
            apt-cache show "nodejs${v}" \
                | grep Version \
                | head -n1 \
                | awk '{ print $2 }'
EOF
}

versions=$(parseBuildVersions 'build.yml' | sed -E 's/^ *- |"//g')

if [ -z "$versions" ]; then
    echo 'failed to parse build.yml' >&2

    exit 255
fi

for v in $versions; do
    nodejs_version=$(getLatestVersion "$v")
    nodejs_major_version=$v
    version=$( \
        echo "$nodejs_version" \
            | sed -E 's/^([0-9]+:)?([0-9]+(\.[0-9]+)*)(-([0-9]+))?.*/\2-r\5/' \
            | sed -E 's/-r$//' \
      )

    if [ -z "$version" ]; then
        echo "failed to determine version from $nodejs_version" >&2

        exit 255
    fi

    {
      echo "NODEJS_VERSION=$nodejs_version"
      echo "NODEJS_MAJOR_VERSION=$nodejs_major_version"
      echo "LABEL_VERSION=$version"
    } \
      > "build${v}.properties"
done
