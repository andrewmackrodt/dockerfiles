#!/bin/sh

# define variables
PUID=${PUID:-}
PGID=${PGID:-}
ADM_USER=ubuntu

detect_uid_gid_from_mounts () {
    # get unique non-root "UID GID" pairs
    local uid_gid="$( \
            mount \
                | awk '$1 ~ /^(\/dev|osx)/ { print $3 }' \
                | sort \
                | xargs -r ls -dn \
                | awk '$3 != 0 && $4 != 0 { print $3, $4 }' \
                | sort \
                | uniq \
        )"

    local count=$(echo "$uid_gid" | grep '.' | wc -l)

    # abort if no mounts
    if [ "$count" -eq 0 ]; then
        if [ "${ENTRYPOINT_DEBUG:-0}" = "1" ]; then
            echo "DEBUG: No non-root mounts detected" >&2
        fi

        return
    fi

    # abort if non unique UID:GID mounts
    if [ "$count" -gt 1 ]; then
        if [ "${ENTRYPOINT_DEBUG:-0}" = "1" ]; then
            echo "DEBUG: Non unique UID:GID mounts detected" >&2
        fi

        return
    fi

    # set PUID if empty
    if [ -z "${PUID}" ]; then
        PUID=$(echo "$uid_gid" | sed -E 's/ .+//')

        echo "INFO: Detected UID $PUID from mounted volume" >&2
    fi

    # set PGID if empty
    if [ -z "${PGID}" ]; then
        PGID=$(echo "$uid_gid" | sed -E 's/^[^ ]+ //')

        echo "INFO: Detected GID $PGID from mounted volume" >&2
    fi
}

set_gid () {
    # replace container gid with pgid in /etc/passwd and /etc/group
    sed -i -E "s/^($ADM_USER:x:[^:]+):[^:]+:/\1:$PGID:/" /etc/passwd
    sed -i -E "s/^($ADM_USER:x):[^:]+:/\1:$PGID:/" /etc/group

    # update file gid

    local exclude_mounts="$( \
          mount \
            | sed -n -E "s#^[^ ]+ on ($ADM_HOME.+?) type.+#\\1#p" \
            | sed -E "s#.+#-not -path '\\0' -not -path '\\0/*'#" \
            | tr $"\n" " " \
        )"

    eval find "$ADM_HOME" $exclude_mounts -print0 | xargs -0 -r chgrp "$PGID"
}

set_uid () {
    # replace container uid with puid in /etc/passwd
    sed -i -E "s/^($ADM_USER:x):[^:]+:/\1:$PUID:/" /etc/passwd

    # update container user home and groups if existing user with puid
    # otherwise update file permissions to puid
    if [ ! -z "$PUID_PASSWD" ]; then
        # add container user to all groups containing puid user
        sed -i -E "s/([:,]$PUID_USER\b)/\1,$ADM_USER/" /etc/group

        # update container user home if uid user is different
        if [ ! -z "$PUID_HOME" ]; then
            # create puid home if it doesn't exist
            if [ ! -d "$PUID_HOME" ]; then
                mkdir -p "$PUID_HOME"
                chown "$PUID:$PUID_GID" "$PUID_HOME"
            fi
        fi
    fi

    # update file uid

    local exclude_mounts="$( \
          mount \
            | sed -n -E "s#^[^ ]+ on ($ADM_HOME.+?) type.+#\\1#p" \
            | sed -E "s#.+#-not -path '\\0' -not -path '\\0/*'#" \
            | tr $"\n" " " \
        )"

    eval find "$ADM_HOME" $exclude_mounts -print0 | xargs -0 -r chown "$PUID"
}

# set PUID and PGID from mounts if empty
if [ -z "${PUID:-}" -o -z "${PGID:-}" ]; then
    echo "WARN: PUID or PGID is empty" >&2

    detect_uid_gid_from_mounts
fi

# /etc/passwd defaults
ADM_PASSWD=$(grep -E "^$ADM_USER:" /etc/passwd)
ADM_UID=$(echo "$ADM_PASSWD" | cut -d':' -f3)
ADM_GID=$(echo "$ADM_PASSWD" | cut -d':' -f4)
ADM_HOME=$(echo "$ADM_PASSWD" | cut -d':' -f6)

PUID="${PUID:-$ADM_UID}"

# PUID user details
PUID_PASSWD=$(grep -E ":x:$PUID:" /etc/passwd | head -n1)
PUID_USER=$(echo "$PUID_PASSWD" | cut -d':' -f1)
PUID_GID=$(echo "$PUID_PASSWD" | cut -d':' -f4)
PUID_HOME=$(echo "$PUID_PASSWD" | cut -d':' -f6)

PGID="${PGID:-${PUID_GID:-$ADM_GID}}"

# update pgid
if [ "$PGID" != "$ADM_GID" ]; then
    set_gid
fi

# update puid and add to puid user groups
if [ "$PUID" != "$ADM_UID" ]; then
    set_uid
fi
